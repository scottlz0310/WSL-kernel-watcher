[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
    "/config.toml",
]

[project]
name = "wsl-kernel-watcher"
version = "2.1.1"
description = "Docker常駐型WSL2カーネル監視ツール - WSL経由Windows通知対応"
authors = [
    {name = "WSL Kernel Watcher Team", email = "wsl-kernel-watcher@example.com"}
]
maintainers = [
    {name = "WSL Kernel Watcher Team", email = "wsl-kernel-watcher@example.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
keywords = ["wsl", "kernel", "monitoring", "notification", "windows", "toast", "tray"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Win32 (MS Windows)",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: Microsoft :: Windows :: Windows 10",
    "Operating System :: Microsoft :: Windows :: Windows 11",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: System :: Monitoring",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
    "Topic :: Software Development :: Version Control",
]

dependencies = [
    "requests>=2.31.0,<3.0.0",
    "urllib3>=2.0.0,<3.0.0",
    "pystray>=0.19.0,<1.0.0",
    "pillow>=10.0.0,<12.0.0",
    "windows-toasts>=1.0.0,<2.0.0; platform_system == 'Windows'",
    "apscheduler>=3.10.0,<4.0.0",
    "packaging>=23.0,<26.0",
    "toml>=0.10.0,<1.0.0",
]

[dependency-groups]
dev = [
    "pytest>=8.4.2",
    "pytest-mock>=3.15.0",
    "pytest-cov>=6.2.1",
    "pytest-timeout>=2.3.0",
    "pytest-asyncio>=0.24.0",
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "black>=24.0.0",
    "pre-commit>=4.0.0",
    "build>=1.0.0",
    "twine>=5.0.0",
    "types-requests>=2.32.4.20250809",
    "types-toml>=0.10.8.20240310",
]

[project.scripts]
wsl-kernel-watcher = "src.main:main"
wsl-kernel-watcher-v2 = "src.main:main"
wkw = "src.main:main"

[project.urls]
Homepage = "https://github.com/scottlz0310/WSL-kernel-watcher"
Repository = "https://github.com/scottlz0310/WSL-kernel-watcher"
Issues = "https://github.com/scottlz0310/WSL-kernel-watcher/issues"
Documentation = "https://github.com/scottlz0310/WSL-kernel-watcher/blob/main/README.md"
Changelog = "https://github.com/scottlz0310/WSL-kernel-watcher/blob/main/CHANGELOG.md"



# Ruff設定
[tool.ruff]
target-version = "py39"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "T20", # flake8-print (print文禁止)
]
ignore = [
    "E501",  # line too long (black handles this)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["T20"]  # テストファイルではprint文を許可
"test-*.py" = ["T20"]  # テストスクリプトではprint文を許可
"interactive-tests/*" = ["T201", "W293", "W291"]  # インタラクティブテストではprint文と空白を許可

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# MyPy設定
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pystray.*",
    "windows_toasts.*",
    "apscheduler.*",
]
ignore_missing_imports = true

# Pytest設定
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "timeout: marks tests with custom timeout settings",
    "asyncio: marks tests as async tests",
]

# Coverage設定
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
